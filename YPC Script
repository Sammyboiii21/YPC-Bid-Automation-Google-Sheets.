function updateYPCSeenAndNewBids() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dailySheet = ss.getSheetByName("Daily Pull YPC");
  const seenSheet = ss.getSheetByName("Seen YPC");
  const newBidsSheet = ss.getSheetByName("New Bids YPC");

  dailySheet.activate();
  SpreadsheetApp.flush();

  const dailyData = dailySheet.getDataRange().getValues();
  const seenData = seenSheet.getDataRange().getValues();

  if (dailyData.length < 2) return;

  const headers = dailyData[0];
  const projectIdIndex = headers.indexOf("Project_ID");
  const projectLinkIndex = headers.indexOf("Project_Link");
  const projectNameIndex = headers.indexOf("Project");
  const stateIndex = headers.indexOf("State");
  const cityIndex = headers.indexOf("City");  // ðŸ‘ˆ Get index of the City column

  if (
    projectIdIndex === -1 ||
    projectLinkIndex === -1 ||
    projectNameIndex === -1 ||
    stateIndex === -1 ||
    cityIndex === -1
  ) {
    throw new Error("Missing one or more required columns: Project_ID, Project_Link, Project, State, or City.");
  }

  const seenIDs = new Set(seenData.slice(1).map(row => String(row[projectIdIndex]).toUpperCase()));

  const newRows = dailyData.slice(1).filter(row =>
    !seenIDs.has(String(row[projectIdIndex]).toUpperCase())
  );

  const cleanedRows = newRows.map(row => {
    const cleaned = row.slice();
    cleaned[projectNameIndex] = {
      formula: `=HYPERLINK("${row[projectLinkIndex]}", "${row[projectNameIndex]}")`
    };
    cleaned.splice(projectLinkIndex, 1);
    return cleaned;
  });

  const newHeaders = headers.slice();
  newHeaders.splice(projectLinkIndex, 1);

  // Always write headers to Seen YPC
  seenSheet.getRange(1, 1, 1, newHeaders.length).setValues([newHeaders]);

  // Append cleaned new rows to Seen YPC
  if (cleanedRows.length > 0) {
    seenSheet.getRange(seenSheet.getLastRow() + 1, 1, cleanedRows.length, cleanedRows[0].length).setValues(
      cleanedRows.map(row => row.map(cell => typeof cell === 'object' && cell.formula ? cell.formula : cell))
    );
  }

  // Filter only WA rows
  const waRows = newRows.filter(row => String(row[stateIndex]).toUpperCase() === "WA");

  // Further filter out specific localities (case-insensitive match on City column)
const excludedLocalities = [
"Arlington", "Auburn", "Black Diamond", "Battle Ground", "Bellevue", "Bellingham", "Bothell", "Brier", "Bremerton", "Burien",
"Camp Murray", "Clark Co.", "Camas", "Covington", "Cowlitz Co.", "DuPont", "Des Moines", "Everett", "Edmonds", "Edgewood", "Federal Way", "Ferndale", "Friday Harbor",
"Fife", "Gig Harbor", "Ilwaco", "JBLM", "Kalama", "Kenmore", "King Co.", "Kirkland", "Kitsap Co.", "Lakewood",
"Longview", "Lewis Co.", "Lilliwaup", "Mason Co.", "McNeil Island", "Mount Vernon", "Normandy Park", "Olympia", "Pierce Co.", "Poulsbo", "Puyallup", "Raymond",
"Redmond", "Renton", "Ridgefield", "Rochester", "SeaTac", "Seattle", "Shelton", "Shoreline", "Skagit Co.",
"Snohomish Co.", "Steilacoom", "Sultan", "Summer", "Tacoma", "Thurston Co.", "Union", "Vancouver", "Vashon Island", "Washougal", "Westport", "Winlock"
].map(name => name.toUpperCase());


  const filteredWaRows = waRows.filter(row =>
    !excludedLocalities.includes(String(row[cityIndex]).toUpperCase())
  );

  const cleanedWaRows = filteredWaRows.map(row => {
    const cleaned = row.slice();
    cleaned[projectNameIndex] = {
      formula: `=HYPERLINK("${row[projectLinkIndex]}", "${row[projectNameIndex]}")`
    };
    cleaned.splice(projectLinkIndex, 1);
    return cleaned;
  });

  // Update New Bids YPC sheet with WA rows only
  newBidsSheet.clearContents();
  newBidsSheet.getRange(1, 1, 1, newHeaders.length).setValues([newHeaders]);

  if (cleanedWaRows.length > 0) {
    newBidsSheet.getRange(2, 1, cleanedWaRows.length, cleanedWaRows[0].length).setValues(
      cleanedWaRows.map(row => row.map(cell => typeof cell === 'object' && cell.formula ? cell.formula : cell))
    );
  }

  // Build WA-only email body
  const introLine = `<p>There are <strong>${filteredWaRows.length}</strong> new WA bids listed on Yakima Planning Center as of <strong>${new Date().toLocaleDateString()}</strong>.</p>`;

  const emailBody = filteredWaRows.map(row => {
    return newHeaders.map((header, idx) => {
      if (header === "Project") {
        return `<strong>Project:</strong> <a href="${row[projectLinkIndex]}">${row[projectNameIndex]}</a>`;
      }
      const originalIdx = idx >= projectLinkIndex ? idx + 1 : idx;
      return `<strong>${header}:</strong> ${row[originalIdx]}`;
    }).join('<br>');
  }).map(block => `<p>${block}</p>`).join('<hr>');

  const htmlBody = `
    <h3>New WA Bids from Yakima Planning Center</h3>
    ${introLine}
    ${emailBody}
  `;

  GmailApp.sendEmail(
   "samk@ttcexcavation.com, tylers@ttcexcavation.com",
    "New WA Bids from Yakima Planning Center",
    "",
    { htmlBody: htmlBody }
  );

  // Clear Daily Pull YPC after email is sent
  dailySheet.clearContents();
}
